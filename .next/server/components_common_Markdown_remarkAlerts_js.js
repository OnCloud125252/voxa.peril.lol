"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "components_common_Markdown_remarkAlerts_js";
exports.ids = ["components_common_Markdown_remarkAlerts_js"];
exports.modules = {

/***/ "./components/common/Markdown/remarkAlerts.js":
/*!****************************************************!*\
  !*** ./components/common/Markdown/remarkAlerts.js ***!
  \****************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-visit */ \"unist-util-visit\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([unist_util_visit__WEBPACK_IMPORTED_MODULE_0__]);\nunist_util_visit__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/**\n * [Analysis]: This plugin converts a Markdown blockquote with a special syntax\n * (e.g., [!NOTE]) into a styled \"alert\" block. It checks the first paragraph node\n * inside each blockquote to see if it begins with a recognized alert code like [!TIP].\n * If so, it:\n *   - Removes the marker ([!TIP], etc.)\n *   - Inserts a label at the top of the blockquote\n *   - Adds corresponding classes to style the alert\n *\n * Potential Issues/Considerations:\n *   1) Safety checks: Ensure we have a paragraph child with text.\n *   2) Preserving existing data.hProperties or className if already present.\n *   3) Avoiding the possibility of empty paragraphs or break tokens causing index issues.\n */ \nconst remarkAlerts = ()=>{\n    const alertTypes = [\n        {\n            id: \"note\",\n            label: \"Note\",\n            code: \"[!NOTE]\"\n        },\n        {\n            id: \"tip\",\n            label: \"Tip\",\n            code: \"[!TIP]\"\n        },\n        {\n            id: \"important\",\n            label: \"Important\",\n            code: \"[!IMPORTANT]\"\n        },\n        {\n            id: \"warning\",\n            label: \"Warning\",\n            code: \"[!WARNING]\"\n        },\n        {\n            id: \"caution\",\n            label: \"Caution\",\n            code: \"[!CAUTION]\"\n        }\n    ];\n    return (tree)=>{\n        (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_0__.visit)(tree, \"blockquote\", (node)=>{\n            // [Analysis]: If the blockquote is empty or doesn't have children, skip.\n            if (!node.children || node.children.length === 0) return;\n            const firstChild = node.children[0];\n            alertTypes.forEach((alertType)=>{\n                // [Analysis]: Check if the first child is a paragraph with text,\n                // and if it starts with the alert marker (e.g., [!NOTE]).\n                if (firstChild?.type === \"paragraph\" && firstChild.children?.[0]?.type === \"text\" && firstChild.children[0].value.startsWith(alertType.code)) {\n                    // Remove the alert marker from the paragraph's first text node\n                    firstChild.children[0].value = firstChild.children[0].value.replace(alertType.code, \"\").trim();\n                    // [Analysis]: If removing the code marker leaves the text node empty, remove it.\n                    if (firstChild.children[0].value === \"\") {\n                        firstChild.children.shift();\n                    }\n                    // [Analysis]: If the next node is a line break, remove it.\n                    if (firstChild.children[0]?.type === \"break\") {\n                        firstChild.children.shift();\n                    }\n                    // [Analysis]: Insert the alert label as a separate paragraph at the top.\n                    node.children.unshift({\n                        type: \"paragraph\",\n                        children: [\n                            {\n                                type: \"text\",\n                                value: alertType.label\n                            }\n                        ],\n                        data: {\n                            hProperties: {\n                                className: \"alert-label\"\n                            }\n                        }\n                    });\n                    // [Analysis]: Add or update classes on the blockquote itself.\n                    // Ensure we preserve existing data.hProperties or classNames.\n                    node.data = node.data || {};\n                    node.data.hProperties = node.data.hProperties || {};\n                    const existingClasses = node.data.hProperties.className ? node.data.hProperties.className.split(\" \") : [];\n                    // [Analysis]: Append \"alert\" and the specific alert type if not already present.\n                    const newClasses = new Set([\n                        ...existingClasses,\n                        \"alert\",\n                        alertType.id\n                    ]);\n                    node.data.hProperties.className = Array.from(newClasses).join(\" \");\n                }\n            });\n        });\n    };\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (remarkAlerts);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL2NvbW1vbi9NYXJrZG93bi9yZW1hcmtBbGVydHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7OztDQWFDLEdBRXdDO0FBRXpDLE1BQU1DLGVBQWU7SUFDbkIsTUFBTUMsYUFBYTtRQUNqQjtZQUFFQyxJQUFJO1lBQVFDLE9BQU87WUFBUUMsTUFBTTtRQUFVO1FBQzdDO1lBQUVGLElBQUk7WUFBT0MsT0FBTztZQUFPQyxNQUFNO1FBQVM7UUFDMUM7WUFBRUYsSUFBSTtZQUFhQyxPQUFPO1lBQWFDLE1BQU07UUFBZTtRQUM1RDtZQUFFRixJQUFJO1lBQVdDLE9BQU87WUFBV0MsTUFBTTtRQUFhO1FBQ3REO1lBQUVGLElBQUk7WUFBV0MsT0FBTztZQUFXQyxNQUFNO1FBQWE7S0FDdkQ7SUFFRCxPQUFPLENBQUNDO1FBQ05OLHVEQUFLQSxDQUFDTSxNQUFNLGNBQWMsQ0FBQ0M7WUFDekIseUVBQXlFO1lBQ3pFLElBQUksQ0FBQ0EsS0FBS0MsUUFBUSxJQUFJRCxLQUFLQyxRQUFRLENBQUNDLE1BQU0sS0FBSyxHQUFHO1lBRWxELE1BQU1DLGFBQWFILEtBQUtDLFFBQVEsQ0FBQyxFQUFFO1lBRW5DTixXQUFXUyxPQUFPLENBQUMsQ0FBQ0M7Z0JBQ2xCLGlFQUFpRTtnQkFDakUsMERBQTBEO2dCQUMxRCxJQUNFRixZQUFZRyxTQUFTLGVBQ3JCSCxXQUFXRixRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUVLLFNBQVMsVUFDbkNILFdBQVdGLFFBQVEsQ0FBQyxFQUFFLENBQUNNLEtBQUssQ0FBQ0MsVUFBVSxDQUFDSCxVQUFVUCxJQUFJLEdBQ3REO29CQUNBLCtEQUErRDtvQkFDL0RLLFdBQVdGLFFBQVEsQ0FBQyxFQUFFLENBQUNNLEtBQUssR0FBR0osV0FBV0YsUUFBUSxDQUFDLEVBQUUsQ0FBQ00sS0FBSyxDQUN4REUsT0FBTyxDQUFDSixVQUFVUCxJQUFJLEVBQUUsSUFDeEJZLElBQUk7b0JBRVAsaUZBQWlGO29CQUNqRixJQUFJUCxXQUFXRixRQUFRLENBQUMsRUFBRSxDQUFDTSxLQUFLLEtBQUssSUFBSTt3QkFDdkNKLFdBQVdGLFFBQVEsQ0FBQ1UsS0FBSztvQkFDM0I7b0JBRUEsMkRBQTJEO29CQUMzRCxJQUFJUixXQUFXRixRQUFRLENBQUMsRUFBRSxFQUFFSyxTQUFTLFNBQVM7d0JBQzVDSCxXQUFXRixRQUFRLENBQUNVLEtBQUs7b0JBQzNCO29CQUVBLHlFQUF5RTtvQkFDekVYLEtBQUtDLFFBQVEsQ0FBQ1csT0FBTyxDQUFDO3dCQUNwQk4sTUFBTTt3QkFDTkwsVUFBVTs0QkFBQztnQ0FBRUssTUFBTTtnQ0FBUUMsT0FBT0YsVUFBVVIsS0FBSzs0QkFBQzt5QkFBRTt3QkFDcERnQixNQUFNOzRCQUFFQyxhQUFhO2dDQUFFQyxXQUFXOzRCQUFjO3dCQUFFO29CQUNwRDtvQkFFQSw4REFBOEQ7b0JBQzlELDhEQUE4RDtvQkFDOURmLEtBQUthLElBQUksR0FBR2IsS0FBS2EsSUFBSSxJQUFJLENBQUM7b0JBQzFCYixLQUFLYSxJQUFJLENBQUNDLFdBQVcsR0FBR2QsS0FBS2EsSUFBSSxDQUFDQyxXQUFXLElBQUksQ0FBQztvQkFDbEQsTUFBTUUsa0JBQWtCaEIsS0FBS2EsSUFBSSxDQUFDQyxXQUFXLENBQUNDLFNBQVMsR0FDbkRmLEtBQUthLElBQUksQ0FBQ0MsV0FBVyxDQUFDQyxTQUFTLENBQUNFLEtBQUssQ0FBQyxPQUN0QyxFQUFFO29CQUVOLGlGQUFpRjtvQkFDakYsTUFBTUMsYUFBYSxJQUFJQyxJQUFJOzJCQUFJSDt3QkFBaUI7d0JBQVNYLFVBQVVULEVBQUU7cUJBQUM7b0JBQ3RFSSxLQUFLYSxJQUFJLENBQUNDLFdBQVcsQ0FBQ0MsU0FBUyxHQUFHSyxNQUFNQyxJQUFJLENBQUNILFlBQVlJLElBQUksQ0FBQztnQkFDaEU7WUFDRjtRQUNGO0lBQ0Y7QUFDRjtBQUVBLGlFQUFlNUIsWUFBWUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2NvbXBvbmVudHMvY29tbW9uL01hcmtkb3duL3JlbWFya0FsZXJ0cy5qcz9lMzVlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogW0FuYWx5c2lzXTogVGhpcyBwbHVnaW4gY29udmVydHMgYSBNYXJrZG93biBibG9ja3F1b3RlIHdpdGggYSBzcGVjaWFsIHN5bnRheFxuICogKGUuZy4sIFshTk9URV0pIGludG8gYSBzdHlsZWQgXCJhbGVydFwiIGJsb2NrLiBJdCBjaGVja3MgdGhlIGZpcnN0IHBhcmFncmFwaCBub2RlXG4gKiBpbnNpZGUgZWFjaCBibG9ja3F1b3RlIHRvIHNlZSBpZiBpdCBiZWdpbnMgd2l0aCBhIHJlY29nbml6ZWQgYWxlcnQgY29kZSBsaWtlIFshVElQXS5cbiAqIElmIHNvLCBpdDpcbiAqICAgLSBSZW1vdmVzIHRoZSBtYXJrZXIgKFshVElQXSwgZXRjLilcbiAqICAgLSBJbnNlcnRzIGEgbGFiZWwgYXQgdGhlIHRvcCBvZiB0aGUgYmxvY2txdW90ZVxuICogICAtIEFkZHMgY29ycmVzcG9uZGluZyBjbGFzc2VzIHRvIHN0eWxlIHRoZSBhbGVydFxuICpcbiAqIFBvdGVudGlhbCBJc3N1ZXMvQ29uc2lkZXJhdGlvbnM6XG4gKiAgIDEpIFNhZmV0eSBjaGVja3M6IEVuc3VyZSB3ZSBoYXZlIGEgcGFyYWdyYXBoIGNoaWxkIHdpdGggdGV4dC5cbiAqICAgMikgUHJlc2VydmluZyBleGlzdGluZyBkYXRhLmhQcm9wZXJ0aWVzIG9yIGNsYXNzTmFtZSBpZiBhbHJlYWR5IHByZXNlbnQuXG4gKiAgIDMpIEF2b2lkaW5nIHRoZSBwb3NzaWJpbGl0eSBvZiBlbXB0eSBwYXJhZ3JhcGhzIG9yIGJyZWFrIHRva2VucyBjYXVzaW5nIGluZGV4IGlzc3Vlcy5cbiAqL1xuXG5pbXBvcnQgeyB2aXNpdCB9IGZyb20gJ3VuaXN0LXV0aWwtdmlzaXQnO1xuXG5jb25zdCByZW1hcmtBbGVydHMgPSAoKSA9PiB7XG4gIGNvbnN0IGFsZXJ0VHlwZXMgPSBbXG4gICAgeyBpZDogJ25vdGUnLCBsYWJlbDogJ05vdGUnLCBjb2RlOiAnWyFOT1RFXScgfSxcbiAgICB7IGlkOiAndGlwJywgbGFiZWw6ICdUaXAnLCBjb2RlOiAnWyFUSVBdJyB9LFxuICAgIHsgaWQ6ICdpbXBvcnRhbnQnLCBsYWJlbDogJ0ltcG9ydGFudCcsIGNvZGU6ICdbIUlNUE9SVEFOVF0nIH0sXG4gICAgeyBpZDogJ3dhcm5pbmcnLCBsYWJlbDogJ1dhcm5pbmcnLCBjb2RlOiAnWyFXQVJOSU5HXScgfSxcbiAgICB7IGlkOiAnY2F1dGlvbicsIGxhYmVsOiAnQ2F1dGlvbicsIGNvZGU6ICdbIUNBVVRJT05dJyB9LFxuICBdO1xuXG4gIHJldHVybiAodHJlZSkgPT4ge1xuICAgIHZpc2l0KHRyZWUsICdibG9ja3F1b3RlJywgKG5vZGUpID0+IHtcbiAgICAgIC8vIFtBbmFseXNpc106IElmIHRoZSBibG9ja3F1b3RlIGlzIGVtcHR5IG9yIGRvZXNuJ3QgaGF2ZSBjaGlsZHJlbiwgc2tpcC5cbiAgICAgIGlmICghbm9kZS5jaGlsZHJlbiB8fCBub2RlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgICBjb25zdCBmaXJzdENoaWxkID0gbm9kZS5jaGlsZHJlblswXTtcblxuICAgICAgYWxlcnRUeXBlcy5mb3JFYWNoKChhbGVydFR5cGUpID0+IHtcbiAgICAgICAgLy8gW0FuYWx5c2lzXTogQ2hlY2sgaWYgdGhlIGZpcnN0IGNoaWxkIGlzIGEgcGFyYWdyYXBoIHdpdGggdGV4dCxcbiAgICAgICAgLy8gYW5kIGlmIGl0IHN0YXJ0cyB3aXRoIHRoZSBhbGVydCBtYXJrZXIgKGUuZy4sIFshTk9URV0pLlxuICAgICAgICBpZiAoXG4gICAgICAgICAgZmlyc3RDaGlsZD8udHlwZSA9PT0gJ3BhcmFncmFwaCcgJiZcbiAgICAgICAgICBmaXJzdENoaWxkLmNoaWxkcmVuPy5bMF0/LnR5cGUgPT09ICd0ZXh0JyAmJlxuICAgICAgICAgIGZpcnN0Q2hpbGQuY2hpbGRyZW5bMF0udmFsdWUuc3RhcnRzV2l0aChhbGVydFR5cGUuY29kZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIHRoZSBhbGVydCBtYXJrZXIgZnJvbSB0aGUgcGFyYWdyYXBoJ3MgZmlyc3QgdGV4dCBub2RlXG4gICAgICAgICAgZmlyc3RDaGlsZC5jaGlsZHJlblswXS52YWx1ZSA9IGZpcnN0Q2hpbGQuY2hpbGRyZW5bMF0udmFsdWVcbiAgICAgICAgICAgIC5yZXBsYWNlKGFsZXJ0VHlwZS5jb2RlLCAnJylcbiAgICAgICAgICAgIC50cmltKCk7XG5cbiAgICAgICAgICAvLyBbQW5hbHlzaXNdOiBJZiByZW1vdmluZyB0aGUgY29kZSBtYXJrZXIgbGVhdmVzIHRoZSB0ZXh0IG5vZGUgZW1wdHksIHJlbW92ZSBpdC5cbiAgICAgICAgICBpZiAoZmlyc3RDaGlsZC5jaGlsZHJlblswXS52YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgICAgIGZpcnN0Q2hpbGQuY2hpbGRyZW4uc2hpZnQoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBbQW5hbHlzaXNdOiBJZiB0aGUgbmV4dCBub2RlIGlzIGEgbGluZSBicmVhaywgcmVtb3ZlIGl0LlxuICAgICAgICAgIGlmIChmaXJzdENoaWxkLmNoaWxkcmVuWzBdPy50eXBlID09PSAnYnJlYWsnKSB7XG4gICAgICAgICAgICBmaXJzdENoaWxkLmNoaWxkcmVuLnNoaWZ0KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gW0FuYWx5c2lzXTogSW5zZXJ0IHRoZSBhbGVydCBsYWJlbCBhcyBhIHNlcGFyYXRlIHBhcmFncmFwaCBhdCB0aGUgdG9wLlxuICAgICAgICAgIG5vZGUuY2hpbGRyZW4udW5zaGlmdCh7XG4gICAgICAgICAgICB0eXBlOiAncGFyYWdyYXBoJyxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbeyB0eXBlOiAndGV4dCcsIHZhbHVlOiBhbGVydFR5cGUubGFiZWwgfV0sXG4gICAgICAgICAgICBkYXRhOiB7IGhQcm9wZXJ0aWVzOiB7IGNsYXNzTmFtZTogJ2FsZXJ0LWxhYmVsJyB9IH0sXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyBbQW5hbHlzaXNdOiBBZGQgb3IgdXBkYXRlIGNsYXNzZXMgb24gdGhlIGJsb2NrcXVvdGUgaXRzZWxmLlxuICAgICAgICAgIC8vIEVuc3VyZSB3ZSBwcmVzZXJ2ZSBleGlzdGluZyBkYXRhLmhQcm9wZXJ0aWVzIG9yIGNsYXNzTmFtZXMuXG4gICAgICAgICAgbm9kZS5kYXRhID0gbm9kZS5kYXRhIHx8IHt9O1xuICAgICAgICAgIG5vZGUuZGF0YS5oUHJvcGVydGllcyA9IG5vZGUuZGF0YS5oUHJvcGVydGllcyB8fCB7fTtcbiAgICAgICAgICBjb25zdCBleGlzdGluZ0NsYXNzZXMgPSBub2RlLmRhdGEuaFByb3BlcnRpZXMuY2xhc3NOYW1lXG4gICAgICAgICAgICA/IG5vZGUuZGF0YS5oUHJvcGVydGllcy5jbGFzc05hbWUuc3BsaXQoJyAnKVxuICAgICAgICAgICAgOiBbXTtcblxuICAgICAgICAgIC8vIFtBbmFseXNpc106IEFwcGVuZCBcImFsZXJ0XCIgYW5kIHRoZSBzcGVjaWZpYyBhbGVydCB0eXBlIGlmIG5vdCBhbHJlYWR5IHByZXNlbnQuXG4gICAgICAgICAgY29uc3QgbmV3Q2xhc3NlcyA9IG5ldyBTZXQoWy4uLmV4aXN0aW5nQ2xhc3NlcywgJ2FsZXJ0JywgYWxlcnRUeXBlLmlkXSk7XG4gICAgICAgICAgbm9kZS5kYXRhLmhQcm9wZXJ0aWVzLmNsYXNzTmFtZSA9IEFycmF5LmZyb20obmV3Q2xhc3Nlcykuam9pbignICcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHJlbWFya0FsZXJ0cztcbiJdLCJuYW1lcyI6WyJ2aXNpdCIsInJlbWFya0FsZXJ0cyIsImFsZXJ0VHlwZXMiLCJpZCIsImxhYmVsIiwiY29kZSIsInRyZWUiLCJub2RlIiwiY2hpbGRyZW4iLCJsZW5ndGgiLCJmaXJzdENoaWxkIiwiZm9yRWFjaCIsImFsZXJ0VHlwZSIsInR5cGUiLCJ2YWx1ZSIsInN0YXJ0c1dpdGgiLCJyZXBsYWNlIiwidHJpbSIsInNoaWZ0IiwidW5zaGlmdCIsImRhdGEiLCJoUHJvcGVydGllcyIsImNsYXNzTmFtZSIsImV4aXN0aW5nQ2xhc3NlcyIsInNwbGl0IiwibmV3Q2xhc3NlcyIsIlNldCIsIkFycmF5IiwiZnJvbSIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/common/Markdown/remarkAlerts.js\n");

/***/ })

};
;