"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "components_common_Markdown_remarkGithub_js";
exports.ids = ["components_common_Markdown_remarkGithub_js"];
exports.modules = {

/***/ "./components/common/Markdown/remarkGithub.js":
/*!****************************************************!*\
  !*** ./components/common/Markdown/remarkGithub.js ***!
  \****************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-visit */ \"unist-util-visit\");\n/* harmony import */ var unist_builder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! unist-builder */ \"unist-builder\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([unist_util_visit__WEBPACK_IMPORTED_MODULE_0__, unist_builder__WEBPACK_IMPORTED_MODULE_1__]);\n([unist_util_visit__WEBPACK_IMPORTED_MODULE_0__, unist_builder__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n/**\n * Analysis:\n * - This plugin uses `unist-util-visit` to walk through the MDAST (Markdown AST).\n * - We only want to transform text nodes that are not children of a link node (i.e., not inside an existing link).\n * - Instead of calling `visit` inside another `visit`, we use a single pass:\n *   `visit(tree, 'text', (node, index, parent, ancestors) => { ... })`.\n * - We then replace text segments matching GitHub-specific patterns (#123, GitHub URLs, @usernames) with link nodes.\n */ \n\nconst isInsideLink = (node, ancestors)=>{\n    // Add null check for ancestors\n    return ancestors?.some((ancestor)=>ancestor.type === \"link\") ?? false;\n};\nconst remarkGithub = (options)=>{\n    const { defaultOrg, defaultRepo } = options ?? {};\n    // [Analysis]: Regex definitions for capturing issue references, GitHub URLs, compare links, and usernames.\n    const issueRegex = /#(\\d+)/g;\n    const fullUrlRegex = /https:\\/\\/github\\.com\\/([\\w-]+)\\/([\\w-]+)\\/(issues|pull)\\/(\\d+)/g;\n    const compareUrlRegex = /https:\\/\\/github\\.com\\/([\\w-]+)\\/([\\w-]+)\\/compare\\/([\\w.-]+)\\.\\.\\.([\\w.-]+)/g;\n    const usernameRegex = /@([\\w-]+)/g; // Matches @username\n    return (tree)=>{\n        // [Analysis]: Single pass over text nodes in the AST.\n        (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_0__.visit)(tree, \"text\", (node, index, parent, ancestors)=>{\n            // Skip if we're already inside a link\n            if (isInsideLink(node, ancestors)) return;\n            const children = [];\n            let lastIndex = 0;\n            let match;\n            function addText(text, start, end) {\n                if (start < end) {\n                    children.push((0,unist_builder__WEBPACK_IMPORTED_MODULE_1__.u)(\"text\", text.slice(start, end)));\n                }\n            }\n            // TODO (analysis): Extend logic to handle variations like my-org/my-repo#123 or my-repo#123 if needed.\n            // --- 1) Handle issue numbers (e.g., #123) ---\n            while((match = issueRegex.exec(node.value)) !== null){\n                const [fullMatch, issueNumber] = match;\n                addText(node.value, lastIndex, match.index);\n                // Create a link node to GitHub issues\n                children.push((0,unist_builder__WEBPACK_IMPORTED_MODULE_1__.u)(\"link\", {\n                    url: `https://github.com/${defaultOrg}/${defaultRepo}/issues/${issueNumber}`\n                }, [\n                    (0,unist_builder__WEBPACK_IMPORTED_MODULE_1__.u)(\"text\", `#${issueNumber}`)\n                ]));\n                lastIndex = match.index + fullMatch.length;\n            }\n            // --- 2) Handle full GitHub URLs to issues or pull requests ---\n            while((match = fullUrlRegex.exec(node.value)) !== null){\n                const [fullMatch, org, repo, type, number] = match;\n                addText(node.value, lastIndex, match.index);\n                // Build link text:\n                //  - If org is the defaultOrg and repo is the defaultRepo, just #number\n                //  - Else show org/repo#number or partial org / partial repo\n                const linkText = `${org === defaultOrg ? \"\" : `${org}/`}${org === defaultOrg && repo === defaultRepo ? \"\" : repo}#${number}`;\n                children.push((0,unist_builder__WEBPACK_IMPORTED_MODULE_1__.u)(\"link\", {\n                    url: `https://github.com/${org}/${repo}/${type}/${number}`\n                }, [\n                    (0,unist_builder__WEBPACK_IMPORTED_MODULE_1__.u)(\"text\", linkText)\n                ]));\n                lastIndex = match.index + fullMatch.length;\n            }\n            // --- 3) Handle GitHub compare URLs ---\n            while((match = compareUrlRegex.exec(node.value)) !== null){\n                const [fullMatch, org, repo, tag1, tag2] = match;\n                addText(node.value, lastIndex, match.index);\n                children.push((0,unist_builder__WEBPACK_IMPORTED_MODULE_1__.u)(\"link\", {\n                    url: `https://github.com/${org}/${repo}/compare/${tag1}...${tag2}`\n                }, [\n                    (0,unist_builder__WEBPACK_IMPORTED_MODULE_1__.u)(\"text\", `${tag1}...${tag2}`)\n                ]));\n                lastIndex = match.index + fullMatch.length;\n            }\n            // --- 4) Handle GitHub usernames (e.g., @someuser) ---\n            while((match = usernameRegex.exec(node.value)) !== null){\n                const [fullMatch, usernameOrOrg] = match;\n                addText(node.value, lastIndex, match.index);\n                children.push((0,unist_builder__WEBPACK_IMPORTED_MODULE_1__.u)(\"link\", {\n                    url: `https://github.com/${usernameOrOrg}`\n                }, [\n                    (0,unist_builder__WEBPACK_IMPORTED_MODULE_1__.u)(\"text\", fullMatch)\n                ]));\n                lastIndex = match.index + fullMatch.length;\n            }\n            // Add remaining text (from last match to end of string)\n            addText(node.value, lastIndex, node.value.length);\n            // [Analysis]: If we actually created new nodes, replace the original text node\n            if (children.length > 1 || children.length === 1 && children[0].type !== \"text\") {\n                parent.children.splice(index, 1, ...children);\n            }\n        });\n    };\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (remarkGithub);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/common/Markdown/remarkGithub.js\n");

/***/ })

};
;